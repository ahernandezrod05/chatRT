// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

//Por debajo es como si tuvieramos un connector de MongoDB, por lo que hay relacionar este id con "_id" que es como Mongo renoconoce los ID's.
//los decoradores significan que id es el ID de la colección.
//Modelo de Usuario. Algunos campos son opcionales para implementar el login con Redes Sociales como Google o Github.
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime? @default(now())
  updatedAt DateTime @updatedAt

  chatIds String[] @db.ObjectId
  chats Chat[] @relation(fields: [chatIds], references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]

}

//Modelo de la cuenta. Aquí es donde se guardan los datos de las cuentas registradas con redes sociales.
model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//Modelo donde se guardan los Chats de los usuarios.
model Chat {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    lastMessageAt DateTime @default(now())
    name String?
    isGroup Boolean?

    messagesIds String[] @db.ObjectId
    messages Message[]

    userIds String[] @db.ObjectId
    users User[] @relation(fields: [userIds], references: [id] )

}
//Modelo de los mensajes del chat
model Message {
      id String @id @default(auto()) @map("_id") @db.ObjectId
      body String?
      image String?
      createdAt DateTime @default(now())

      seenIds String[] @db.ObjectId
      seen User[] @relation("Seen", fields: [seenIds], references: [id])
      
      chatIds String @db.ObjectId
      chat Chat @relation(fields: [chatIds], references: [id])

      senderId String @db.ObjectId
      sender User @relation(fields: [senderId], references: [id])

}